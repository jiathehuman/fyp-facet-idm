"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 5.2.1.
"""

from pathlib import Path
from datetime import timedelta

import os
import environ
import dj_database_url

env = environ.Env()
env.read_env()

BASE_DIR = Path(__file__).resolve().parent.parent


SECRET_KEY = """django-insecure-p02dd8ff65j@w@92=qhom020oh97g-t&uh&2m-u+r#k)(+y)st"""

DEBUG = True

# For development
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']

CORS_ALLOWED_ORIGINS = [
    "https://your-frontend-service.onrender.com",
    "https://facet-identity-management-production.up.railway.app",
    "https://artistic-generosity-production.up.railway.app"
]

CSRF_TRUSTED_ORIGINS = ["http://localhost:5173",
                        "http://localhost:4173",
                        "https://facet-identity-management-production.up.railway.app",
                        "https://artistic-generosity-production.up.railway.app"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "django.contrib.sites",
    "rest_framework",
    "rest_framework_simplejwt",
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework.authtoken',
    'rest_framework_api_key',
    "corsheaders",

    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.facebook",

    # Custom applications
    "userauth",
    "persona",
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PARSER_CLASSES': (  # When using Google Login
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.ScopedRateThrottle",
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        "rest_framework.throttling.ScopedRateThrottle"

    ],
    # Returns HTTP 429 TOO MANY REQUESTS if rates overshoot
    "DEFAULT_THROTTLE_RATES": {
        "login": "5/min",
        # Throttle the requests of unconfirmed/authenticated users
        'anon': '30/min',
        'user': '60/min',
        # Control access to APIs
        'high': '500/day',
        'low': '50/day'
    },
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "ALGORITHM": "HS256",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_BLACKLIST_ENABLED": True,
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASE_URL = os.getenv("DB_URL")  # expect a full URL here in local dev
if DATABASE_URL:
    default_db = dj_database_url.parse(DATABASE_URL, conn_max_age=600, ssl_require=False)
else:
    # Solid fallback if env var is missing
    default_db = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": str(BASE_DIR / "db.sqlite3"),
    }

# If it's Postgres and sslmode wasnâ€™t added via URL, enforce it here.
if default_db.get("ENGINE") == "django.db.backends.postgresql":
    default_db.setdefault("OPTIONS", {}).setdefault("sslmode", "require")

DATABASES = {"default": default_db}

# DATABASES = {
#     "default":
#         # "ENGINE": "django.db.backends.sqlite3",
#         # "NAME": BASE_DIR / "db.sqlite3",
#         # Uncomment for docker
#         dj_database_url.parse(
#             os.getenv("DATABASE_URL", "sqlite:///db.sqlite3"),
#             conn_max_age=600,
#             ssl_require=True,
#         ),
#         # 'ENGINE': 'django.db.backends.postgresql',
#         # 'NAME': os.environ.get('DB_NAME'),
#         # 'USER': os.environ.get('DB_USER'),
#         # 'PASSWORD': os.environ.get('DB_PASSWORD'),
#         # 'HOST': os.environ.get('DB_HOST'),
#         # 'PORT': os.environ.get('DB_PORT'),

# }

# Password validation
# Reference:
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {"min_length": 8},
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = 'userauth.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Add social accounts at a later date
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': env('OAUTH_GOOGLE_CLIENT_ID'),
            'secret': env('OAUTH_GOOGLE_SECRET'),
        },
        'SCOPE': [
            'profile',
            'email'
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
            # prompt consent screen everytime we sign in with google
            'prompt': 'consent'
        }
    }
}
SOCIALACCOUNT_ADAPTER = 'api.adapters.SocialAccountsAdapter'

EMAIL_BACKEND = "django.corre.mail.backends.console.EmailBackend"

# For deployment, to make more secure later
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWS_CREDENTIALS = True

LOGIN_REDIRECT_URL = '/social-login-success/'

SECURE_CROSS_ORIGIN_OPENER_POLICY = None

SITE_ID = 1

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'allauth': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    }
}

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

GOOGLE_CLIENT_ID = env('OAUTH_GOOGLE_CLIENT_ID')